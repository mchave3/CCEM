name: Reusable Build & Release

on:
  workflow_call:
    inputs:
      source-branch:
        description: Git branch to checkout before building
        required: true
        type: string
      release-channel:
        description: Velopack channel name (stable or nightly)
        required: true
        type: string
      release-type:
        description: Versioning scheme (stable | nightly)
        required: true
        type: string
      release-title-prefix:
        description: Prefix used for the GitHub Release title (e.g., "CCEM" or "CCEM Nightly")
        required: true
        type: string
    outputs:
      version:
        description: Short version identifier (YYMM.n or YYMM-BUILD)
        value: ${{ jobs.build.outputs.version }}
      msix-version:
        description: 4-part MSIX version (e.g., 25.10.1.0 or 25.10.0.7)
        value: ${{ jobs.build.outputs.msix-version }}
      tag-name:
        description: Git tag created
        value: ${{ jobs.build.outputs.tag-name }}
      release-url:
        description: URL of the GitHub Release
        value: ${{ jobs.build.outputs.release-url }}

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ inputs.release-type }}
  cancel-in-progress: true

env:
  # Tooling
  DOTNET_VERSION: '8.0.x'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

  # Project paths (adapte si besoin)
  PROJECT_PATH: src/CCEM/CCEM.csproj
  MANIFEST_PATH: src/CCEM/Package.appxmanifest
  SHARED_ASSEMBLY_INFO_PATH: src/SharedAssemblyInfo.cs

  # Build & artifacts
  PUBLISH_DIR: publish
  ARTIFACTS_DIR: artifacts
  MSIX_DIR: artifacts/MSIX
  VELOPACK_OUTPUT_DIR: Releases

  # Velopack
  VELOPACK_APP_ID: CCEM
  VELOPACK_TITLE: Client Center for Endpoint Manager
  VELOPACK_ICON: src/CCEM/Assets/AppIcon.ico

  # Release body templates (chemin racine du repo)
  RELEASE_BODY_NIGHTLY_TEMPLATE: nightly-body-template.md
  RELEASE_BODY_STABLE_TEMPLATE: release-body-template.md

jobs:
  build:
    name: Build & Release
    runs-on: windows-latest
    timeout-minutes: 60
    defaults:
      run:
        shell: pwsh
    outputs:
      version: ${{ steps.calculate-version.outputs.version }}
      msix-version: ${{ steps.calculate-version.outputs.msix-version }}
      tag-name: ${{ steps.calculate-version.outputs.tag-name }}
      release-url: ${{ steps.release-url.outputs.release-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source-branch }}
          fetch-depth: 0
          persist-credentials: false

      - name: Ensure tags
        run: git fetch --force --tags

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore & Build (baseline)
        run: |
          dotnet restore $env:PROJECT_PATH -r win-x64
          dotnet build $env:PROJECT_PATH -c Release -r win-x64 -p:Platform=x64

      - name: Calculate version (YYMM.n or YYMM-BUILD)
        id: calculate-version
        run: |
          $releaseType = "${{ inputs.release-type }}".ToLowerInvariant()
          $now = [DateTime]::UtcNow
          $yy = $now.ToString("yy")
          $MM = $now.ToString("MM")
          $yymm = "$yy$MM"

          $tags = (git tag) | Where-Object { $_ -match "^v\d{4}([\.-]\d+)?$" }
          $max = 0
          foreach ($t in $tags) {
            if ($releaseType -eq "stable" -and $t -match "^v$yymm\.(\d+)$") { $max=[math]::Max($max,[int]$Matches[1]) }
            elseif ($releaseType -eq "nightly" -and $t -match "^v$yymm-(\d+)$") { $max=[math]::Max($max,[int]$Matches[1]) }
          }
          $seq = $max + 1

          if ($releaseType -eq "stable") {
            $version     = "$yymm.$seq"           # 2510.1
            $msixVersion = "$yy.$MM.$seq.0"       # 25.10.1.0
          } else {
            $version     = "$yymm-$seq"           # 2510-3
            $msixVersion = "$yy.$MM.0.$seq"       # 25.10.0.3
          }

          "version=$version"           | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8
          "msix-version=$msixVersion"  | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8
          "tag-name=v$version"         | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8
          "release-name=${{ inputs.release-title-prefix }} $version" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8
          "source-commit=$(git rev-parse HEAD)" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Update versions (AppxManifest & SharedAssemblyInfo.cs)
        run: |
          $msixVersion = "${{ steps.calculate-version.outputs.msix-version }}"

          if (Test-Path $env:MANIFEST_PATH) {
            [xml]$m = Get-Content $env:MANIFEST_PATH
            $m.Package.Identity.Version = $msixVersion
            $m.Save((Resolve-Path $env:MANIFEST_PATH))
          }

          if (Test-Path $env:SHARED_ASSEMBLY_INFO_PATH) {
            $p = Resolve-Path $env:SHARED_ASSEMBLY_INFO_PATH
            $c = Get-Content $p -Raw
            $c = [regex]::Replace($c,'AssemblyVersion\(".*?"\)',"AssemblyVersion(`"$msixVersion`")")
            $c = [regex]::Replace($c,'AssemblyFileVersion\(".*?"\)',"AssemblyFileVersion(`"$msixVersion`")")
            $c = [regex]::Replace($c,'AssemblyInformationalVersion\(".*?"\)',"AssemblyInformationalVersion(`"$msixVersion`")")
            Set-Content $p $c -Encoding utf8
          }

      - name: Publish (unpackaged) for Velopack
        run: |
          if (Test-Path $env:PUBLISH_DIR) { Remove-Item $env:PUBLISH_DIR -Recurse -Force }
          dotnet publish $env:PROJECT_PATH -c Release -r win-x64 --self-contained true -o $env:PUBLISH_DIR

      - name: Build MSIX (best effort)
        continue-on-error: true
        run: |
          New-Item -ItemType Directory -Force -Path $env:MSIX_DIR | Out-Null
          $done=$false

          try {
            dotnet publish $env:PROJECT_PATH -c Release -o $env:MSIX_DIR -p:WindowsPackageType=MSIX
            $done=$true
          } catch { }

          if (-not $done) {
            $wapproj = Get-ChildItem -Recurse -Filter *.wapproj | Select-Object -First 1
            if ($wapproj) {
              msbuild $wapproj.FullName /restore /t:Rebuild `
                /p:Configuration=Release `
                /p:GenerateAppxPackageOnBuild=true `
                /p:AppxBundle=Never `
                /p:UapAppxPackageBuildMode=SideLoadOnly
              Get-ChildItem -Recurse -Include *.msix,*.msixbundle | Copy-Item -Destination $env:MSIX_DIR -Force
              $done=$true
            }
          }
          if ($done) { Write-Host "MSIX artifacts in $env:MSIX_DIR" } else { Write-Host "MSIX build skipped" }

      - name: Install/Update Velopack (vpk) & pack
        run: |
          if (-not (Test-Path (Join-Path $env:USERPROFILE ".dotnet\tools\vpk.exe"))) {
            dotnet tool install --global vpk
          } else {
            dotnet tool update --global vpk
          }
          (Join-Path $env:USERPROFILE ".dotnet\tools") | Out-File $env:GITHUB_PATH -Append -Encoding utf8

          if (Test-Path $env:VELOPACK_OUTPUT_DIR) { Remove-Item $env:VELOPACK_OUTPUT_DIR -Recurse -Force }
          vpk pack `
            -u $env:VELOPACK_APP_ID `
            -v "${{ steps.calculate-version.outputs.version }}" `
            -p $env:PUBLISH_DIR `
            -o $env:VELOPACK_OUTPUT_DIR `
            -c "${{ inputs.release-channel }}" `
            --packTitle "$env:VELOPACK_TITLE" `
            --icon "$env:VELOPACK_ICON"

      - name: Upload artifacts (unpackaged)
        uses: actions/upload-artifact@v4
        with:
          name: publish-unpackaged
          path: ${{ env.PUBLISH_DIR }}/**
          if-no-files-found: warn
          retention-days: 7

      - name: Upload artifacts (Velopack)
        uses: actions/upload-artifact@v4
        with:
          name: velopack-${{ inputs.release-channel }}-${{ steps.calculate-version.outputs.version }}
          path: ${{ env.VELOPACK_OUTPUT_DIR }}/**
          if-no-files-found: error
          retention-days: 14

      - name: Upload artifacts (MSIX)
        uses: actions/upload-artifact@v4
        with:
          name: msix
          path: ${{ env.MSIX_DIR }}/**
          if-no-files-found: warn
          retention-days: 14

      - name: Calculate hashes & generate FILES_TABLE
        id: files-table
        shell: pwsh
        run: |
          $repo = "${{ github.repository }}"
          $ver = "${{ steps.calculate-version.outputs.version }}"
          $rows = @()

          $collect = @()
          if (Test-Path $env:VELOPACK_OUTPUT_DIR) { $collect += Get-ChildItem -Path $env:VELOPACK_OUTPUT_DIR -File -Recurse }
          if (Test-Path $env:MSIX_DIR) { $collect += Get-ChildItem -Path $env:MSIX_DIR -File -Recurse }

          foreach ($f in ($collect | Sort-Object Name)) {
            $hash = (Get-FileHash $f.FullName -Algorithm SHA256).Hash
            $dl = "https://github.com/$repo/releases/download/v$ver/$($f.Name)"
            $badge = "https://img.shields.io/github/downloads/$repo/v$ver/$($f.Name)?style=flat-square&label=&color=blue"
            $rows += "|[$($f.Name)]($dl)|``$hash``|<picture>![$($f.Name)]($badge)</picture>|"
          }

          $table = @"
          ## Files
          |Files|Hash (SHA256)|Downloads|
          |---|---|---|
          $($rows -join "`n")
          "@

          Add-Content -Path $env:GITHUB_OUTPUT -Value "files_table<<EOF"
          Add-Content -Path $env:GITHUB_OUTPUT -Value $table
          Add-Content -Path $env:GITHUB_OUTPUT -Value "EOF"

      - name: Generate release body from template
        id: release-body
        shell: pwsh
        run: |
          $isNightly = ("${{ inputs.release-type }}" -eq "nightly")
          $tpl = if ($isNightly) { $env:RELEASE_BODY_NIGHTLY_TEMPLATE } else { $env:RELEASE_BODY_STABLE_TEMPLATE }
          $tplContent = Get-Content -Path $tpl -Raw
          $notes = ""  # inject notes if needed
          $body = $tplContent
          if ([string]::IsNullOrEmpty($notes)) {
            $body = $body -replace '\{RELEASE_NOTES\}\r?\n\r?\n',''
            $body = $body -replace '\{RELEASE_NOTES\}',''
          } else {
            $body = $body -replace '\{RELEASE_NOTES\}',$notes
          }
          $body = $body -replace '\{FILES_TABLE\}',"${{ steps.files-table.outputs.files_table }}"

          $out = "generated-release-body.md"
          $body | Out-File -FilePath $out -Encoding UTF8 -NoNewline
          "body_path=$out" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Create Git tag & GitHub Release
        id: gh-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.calculate-version.outputs.tag-name }}
          name: ${{ steps.calculate-version.outputs.release-name }}
          target_commitish: ${{ steps.calculate-version.outputs.source-commit }}
          prerelease: ${{ inputs.release-type == 'nightly' }}
          files: |
            ${{ env.VELOPACK_OUTPUT_DIR }}/**
            ${{ env.MSIX_DIR }}/**
          body_path: ${{ steps.release-body.outputs.body_path }}

      - name: Release URL
        id: release-url
        run: |
          $url = "https://github.com/${{ github.repository }}/releases/tag/${{ steps.calculate-version.outputs.tag-name }}"
          "release-url=$url" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Summary
        if: always()
        run: |
          Write-Host "## Release Summary" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "* Version: `${{ steps.calculate-version.outputs.version }}`" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "* MSIX: `${{ steps.calculate-version.outputs.msix-version }}`" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "* Channel: `${{ inputs.release-channel }}`" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "* Tag: `${{ steps.calculate-version.outputs.tag-name }}`" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "* Release: ${{ steps.release-url.outputs.release-url }}" >> $env:GITHUB_STEP_SUMMARY
