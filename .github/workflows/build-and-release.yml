name: üé≠ Build & Release Orchestrator

on:
  workflow_call:
    inputs:
      source-branch:
        description: Git branch to checkout before building
        required: true
        type: string
      release-channel:
        description: Velopack channel name (stable or beta)
        required: true
        type: string
      release-type:
        description: Versioning scheme (stable | beta)
        required: true
        type: string
      release-title-prefix:
        description: Prefix used for the GitHub Release title (e.g., "CCEM" or "CCEM Beta")
        required: true
        type: string
    outputs:
      version:
        description: Short version identifier (YYMM.n or YYMM-Beta.BUILD)
        value: ${{ jobs.calculate-version.outputs.version }}
      msix-version:
        description: 4-part MSIX version (e.g., 25.10.1.0 or 25.10.0.7)
        value: ${{ jobs.calculate-version.outputs.msix-version }}
      tag-name:
        description: Git tag created
        value: ${{ jobs.calculate-version.outputs.tag-name }}
      release-url:
        description: URL of the GitHub Release
        value: ${{ jobs.create-release.outputs.release-url }}

permissions:
  contents: write

env:
  # Tooling
  DOTNET_VERSION: '8.0.x'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

  # Project paths
  PROJECT_PATH: src/CCEM/CCEM.csproj
  MANIFEST_PATH: src/CCEM/Package.appxmanifest
  SHARED_ASSEMBLY_INFO_PATH: src/SharedAssemblyInfo.cs

  # Build & artifacts
  PUBLISH_DIR: publish
  ARTIFACTS_DIR: artifacts
  MSIX_DIR: artifacts/MSIX
  VELOPACK_OUTPUT_DIR: Releases

  # Velopack
  VELOPACK_APP_ID: CCEM
  VELOPACK_TITLE: Client Center for Endpoint Manager
  VELOPACK_ICON: src/CCEM/Assets/AppIcon.ico

  # Release body templates
  RELEASE_BODY_BETA_TEMPLATE: .github/workflows/beta-body-template.md
  RELEASE_BODY_STABLE_TEMPLATE: .github/workflows/release-body-template.md

jobs:
  # Job 1: Calculate version based on release type
  calculate-version:
    name: üìä Calculate Version
    uses: ./.github/workflows/calculate-version.yml
    with:
      release-type: ${{ inputs.release-type }}
      source-branch: ${{ inputs.source-branch }}

  # Job 2: Build .NET project
  build-dotnet:
    name: üèóÔ∏è Build .NET
    needs: calculate-version
    uses: ./.github/workflows/build-dotnet.yml
    with:
      project-path: src/CCEM/CCEM.csproj
      msix-version: ${{ needs.calculate-version.outputs.msix-version }}
      manifest-path: src/CCEM/Package.appxmanifest
      shared-assembly-info-path: src/SharedAssemblyInfo.cs
      publish-dir: publish
      dotnet-version: 8.0.x

  # Job 3: Package with Velopack
  package-velopack:
    name: üì¶ Package Velopack
    needs: [calculate-version, build-dotnet]
    uses: ./.github/workflows/package-velopack.yml
    with:
      app-id: CCEM
      version: ${{ needs.calculate-version.outputs.version }}
      publish-dir: publish
      output-dir: Releases
      channel: ${{ inputs.release-channel }}
      title: Client Center for Endpoint Manager
      icon-path: src/CCEM/Assets/AppIcon.ico
      artifact-name: velopack-${{ inputs.release-channel }}-${{ needs.calculate-version.outputs.version }}

  # Job 4: Create GitHub Release
  create-release:
    name: üöÄ Create Release
    needs: [calculate-version, package-velopack]
    uses: ./.github/workflows/create-github-release.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      tag-name: ${{ needs.calculate-version.outputs.tag-name }}
      release-name: ${{ inputs.release-title-prefix }} ${{ needs.calculate-version.outputs.version }}
      source-commit: ${{ needs.calculate-version.outputs.source-commit }}
      is-prerelease: ${{ inputs.release-type == 'beta' }}
      release-body-template: ${{ inputs.release-type == 'beta' && '.github/workflows/beta-body-template.md' || '.github/workflows/release-body-template.md' }}
      velopack-output-dir: Releases
      msix-dir: ''

  # Job 5: Generate GitHub Summary
  github-summary:
    name: üìã Summary
    needs: [calculate-version, create-release]
    if: always()
    uses: ./.github/workflows/github-summary.yml
    with:
      version: ${{ needs.calculate-version.outputs.version }}
      msix-version: ${{ needs.calculate-version.outputs.msix-version }}
      tag-name: ${{ needs.calculate-version.outputs.tag-name }}
      release-channel: ${{ inputs.release-channel }}
      release-url: ${{ needs.create-release.outputs.release-url }}
      source-commit: ${{ needs.calculate-version.outputs.source-commit }}
