name: Derive Release Version

on:
  workflow_call:
    inputs:
      release_type:
        description: '"stable" or "nightly"'
        required: true
        type: string
    outputs:
      version:
        description: Short release version (e.g. 2510.1 or 2510-213)
        value: ${{ jobs.compute.outputs.version }}
      msix_version:
        description: MSIX compatible version string
        value: ${{ jobs.compute.outputs.msix_version }}
      tag:
        description: Git tag that should be created for the release
        value: ${{ jobs.compute.outputs.tag }}
      channel:
        description: Velopack channel name derived from the release type
        value: ${{ jobs.compute.outputs.channel }}
      build_iteration:
        description: Incremental build counter for the given month
        value: ${{ jobs.compute.outputs.build_iteration }}
      release_name:
        description: Human readable release title
        value: ${{ jobs.compute.outputs.release_name }}

jobs:
  compute:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    outputs:
      version: ${{ steps.set-metadata.outputs.version }}
      msix_version: ${{ steps.set-metadata.outputs.msix_version }}
      tag: ${{ steps.set-metadata.outputs.tag }}
      channel: ${{ steps.set-metadata.outputs.channel }}
      build_iteration: ${{ steps.set-metadata.outputs.build_iteration }}
      release_name: ${{ steps.set-metadata.outputs.release_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Compute release version components
        id: set-metadata
        run: |
          $ErrorActionPreference = 'Stop'

          $releaseType = '${{ inputs.release_type }}'.ToLowerInvariant()

          if ($releaseType -ne 'stable' -and $releaseType -ne 'nightly') {
            throw "Unsupported release type: $releaseType"
          }

          $now = [DateTime]::UtcNow
          $YY = $now.ToString('yy')
          $MM = $now.ToString('MM')

          if ($releaseType -eq 'stable') {
            $pattern = "v{0}{1}.*" -f $YY, $MM
          } else {
            $pattern = "v{0}{1}-*" -f $YY, $MM
          }

          $tags = git tag -l $pattern
          $maxIteration = 0

          foreach ($tag in $tags) {
            if ([string]::IsNullOrWhiteSpace($tag)) {
              continue
            }

            if ($releaseType -eq 'stable') {
              if ($tag -match "^v$YY$MM\.([0-9]+)$") {
                $value = [int]$Matches[1]
                if ($value -gt $maxIteration) {
                  $maxIteration = $value
                }
              }
            } else {
              if ($tag -match "^v$YY$MM-([0-9]+)$") {
                $value = [int]$Matches[1]
                if ($value -gt $maxIteration) {
                  $maxIteration = $value
                }
              }
            }
          }

          $nextIteration = $maxIteration + 1

          if ($releaseType -eq 'stable') {
            $shortVersion = "{0}{1}.{2}" -f $YY, $MM, $nextIteration
            $msixVersion = "{0}.{1}.{2}.0" -f $YY, $MM, $nextIteration
            $channel = 'stable'
            $releaseName = "CCEM $shortVersion"
          } else {
            $shortVersion = "{0}{1}-{2}" -f $YY, $MM, $nextIteration
            $msixVersion = "{0}.{1}.0.{2}" -f $YY, $MM, $nextIteration
            $channel = 'nightly'
            $releaseName = "CCEM Nightly $shortVersion"
          }

          $tagValue = "v$shortVersion"

          @"
version=$shortVersion
msix_version=$msixVersion
tag=$tagValue
channel=$channel
build_iteration=$nextIteration
release_name=$releaseName
"@ | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
